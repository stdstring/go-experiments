// Code generated by MockGen. DO NOT EDIT.
// Source: execution_manager.go

// Package expressiontree is a generated GoMock package.
package expressiontree

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIExecutionManager is a mock of IExecutionManager interface.
type MockIExecutionManager struct {
	ctrl     *gomock.Controller
	recorder *MockIExecutionManagerMockRecorder
}

// MockIExecutionManagerMockRecorder is the mock recorder for MockIExecutionManager.
type MockIExecutionManagerMockRecorder struct {
	mock *MockIExecutionManager
}

// NewMockIExecutionManager creates a new mock instance.
func NewMockIExecutionManager(ctrl *gomock.Controller) *MockIExecutionManager {
	mock := &MockIExecutionManager{ctrl: ctrl}
	mock.recorder = &MockIExecutionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExecutionManager) EXPECT() *MockIExecutionManagerMockRecorder {
	return m.recorder
}

// CheckBasicAuthPassword mocks base method.
func (m *MockIExecutionManager) CheckBasicAuthPassword(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBasicAuthPassword", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBasicAuthPassword indicates an expected call of CheckBasicAuthPassword.
func (mr *MockIExecutionManagerMockRecorder) CheckBasicAuthPassword(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBasicAuthPassword", reflect.TypeOf((*MockIExecutionManager)(nil).CheckBasicAuthPassword), predicate, data)
}

// CheckBasicAuthUsername mocks base method.
func (m *MockIExecutionManager) CheckBasicAuthUsername(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBasicAuthUsername", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBasicAuthUsername indicates an expected call of CheckBasicAuthUsername.
func (mr *MockIExecutionManagerMockRecorder) CheckBasicAuthUsername(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBasicAuthUsername", reflect.TypeOf((*MockIExecutionManager)(nil).CheckBasicAuthUsername), predicate, data)
}

// CheckBrowserName mocks base method.
func (m *MockIExecutionManager) CheckBrowserName(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBrowserName", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBrowserName indicates an expected call of CheckBrowserName.
func (mr *MockIExecutionManagerMockRecorder) CheckBrowserName(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBrowserName", reflect.TypeOf((*MockIExecutionManager)(nil).CheckBrowserName), predicate, data)
}

// CheckBrowserVersion mocks base method.
func (m *MockIExecutionManager) CheckBrowserVersion(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBrowserVersion", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBrowserVersion indicates an expected call of CheckBrowserVersion.
func (mr *MockIExecutionManagerMockRecorder) CheckBrowserVersion(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBrowserVersion", reflect.TypeOf((*MockIExecutionManager)(nil).CheckBrowserVersion), predicate, data)
}

// CheckClientId mocks base method.
func (m *MockIExecutionManager) CheckClientId(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClientId", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckClientId indicates an expected call of CheckClientId.
func (mr *MockIExecutionManagerMockRecorder) CheckClientId(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClientId", reflect.TypeOf((*MockIExecutionManager)(nil).CheckClientId), predicate, data)
}

// CheckClientIp mocks base method.
func (m *MockIExecutionManager) CheckClientIp(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckClientIp", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckClientIp indicates an expected call of CheckClientIp.
func (mr *MockIExecutionManagerMockRecorder) CheckClientIp(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckClientIp", reflect.TypeOf((*MockIExecutionManager)(nil).CheckClientIp), predicate, data)
}

// CheckGeoIpAccuracyRadius mocks base method.
func (m *MockIExecutionManager) CheckGeoIpAccuracyRadius(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGeoIpAccuracyRadius", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckGeoIpAccuracyRadius indicates an expected call of CheckGeoIpAccuracyRadius.
func (mr *MockIExecutionManagerMockRecorder) CheckGeoIpAccuracyRadius(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGeoIpAccuracyRadius", reflect.TypeOf((*MockIExecutionManager)(nil).CheckGeoIpAccuracyRadius), predicate, data)
}

// CheckGeoIpCity mocks base method.
func (m *MockIExecutionManager) CheckGeoIpCity(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGeoIpCity", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckGeoIpCity indicates an expected call of CheckGeoIpCity.
func (mr *MockIExecutionManagerMockRecorder) CheckGeoIpCity(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGeoIpCity", reflect.TypeOf((*MockIExecutionManager)(nil).CheckGeoIpCity), predicate, data)
}

// CheckGeoIpCountry mocks base method.
func (m *MockIExecutionManager) CheckGeoIpCountry(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGeoIpCountry", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckGeoIpCountry indicates an expected call of CheckGeoIpCountry.
func (mr *MockIExecutionManagerMockRecorder) CheckGeoIpCountry(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGeoIpCountry", reflect.TypeOf((*MockIExecutionManager)(nil).CheckGeoIpCountry), predicate, data)
}

// CheckGeoIpCountryCode mocks base method.
func (m *MockIExecutionManager) CheckGeoIpCountryCode(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGeoIpCountryCode", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckGeoIpCountryCode indicates an expected call of CheckGeoIpCountryCode.
func (mr *MockIExecutionManagerMockRecorder) CheckGeoIpCountryCode(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGeoIpCountryCode", reflect.TypeOf((*MockIExecutionManager)(nil).CheckGeoIpCountryCode), predicate, data)
}

// CheckGeoIpLat mocks base method.
func (m *MockIExecutionManager) CheckGeoIpLat(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGeoIpLat", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckGeoIpLat indicates an expected call of CheckGeoIpLat.
func (mr *MockIExecutionManagerMockRecorder) CheckGeoIpLat(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGeoIpLat", reflect.TypeOf((*MockIExecutionManager)(nil).CheckGeoIpLat), predicate, data)
}

// CheckGeoIpLon mocks base method.
func (m *MockIExecutionManager) CheckGeoIpLon(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckGeoIpLon", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckGeoIpLon indicates an expected call of CheckGeoIpLon.
func (mr *MockIExecutionManagerMockRecorder) CheckGeoIpLon(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckGeoIpLon", reflect.TypeOf((*MockIExecutionManager)(nil).CheckGeoIpLon), predicate, data)
}

// CheckHttpDataHost mocks base method.
func (m *MockIExecutionManager) CheckHttpDataHost(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHttpDataHost", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckHttpDataHost indicates an expected call of CheckHttpDataHost.
func (mr *MockIExecutionManagerMockRecorder) CheckHttpDataHost(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHttpDataHost", reflect.TypeOf((*MockIExecutionManager)(nil).CheckHttpDataHost), predicate, data)
}

// CheckHttpDataHttpVersion mocks base method.
func (m *MockIExecutionManager) CheckHttpDataHttpVersion(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHttpDataHttpVersion", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckHttpDataHttpVersion indicates an expected call of CheckHttpDataHttpVersion.
func (mr *MockIExecutionManagerMockRecorder) CheckHttpDataHttpVersion(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHttpDataHttpVersion", reflect.TypeOf((*MockIExecutionManager)(nil).CheckHttpDataHttpVersion), predicate, data)
}

// CheckHttpDataPort mocks base method.
func (m *MockIExecutionManager) CheckHttpDataPort(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHttpDataPort", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckHttpDataPort indicates an expected call of CheckHttpDataPort.
func (mr *MockIExecutionManagerMockRecorder) CheckHttpDataPort(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHttpDataPort", reflect.TypeOf((*MockIExecutionManager)(nil).CheckHttpDataPort), predicate, data)
}

// CheckHttpDataProtocol mocks base method.
func (m *MockIExecutionManager) CheckHttpDataProtocol(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHttpDataProtocol", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckHttpDataProtocol indicates an expected call of CheckHttpDataProtocol.
func (mr *MockIExecutionManagerMockRecorder) CheckHttpDataProtocol(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHttpDataProtocol", reflect.TypeOf((*MockIExecutionManager)(nil).CheckHttpDataProtocol), predicate, data)
}

// CheckHttpDataTimestamp mocks base method.
func (m *MockIExecutionManager) CheckHttpDataTimestamp(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckHttpDataTimestamp", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckHttpDataTimestamp indicates an expected call of CheckHttpDataTimestamp.
func (mr *MockIExecutionManagerMockRecorder) CheckHttpDataTimestamp(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckHttpDataTimestamp", reflect.TypeOf((*MockIExecutionManager)(nil).CheckHttpDataTimestamp), predicate, data)
}

// CheckOption mocks base method.
func (m *MockIExecutionManager) CheckOption(predicate Predicate, optionName string, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOption", predicate, optionName, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOption indicates an expected call of CheckOption.
func (mr *MockIExecutionManagerMockRecorder) CheckOption(predicate, optionName, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOption", reflect.TypeOf((*MockIExecutionManager)(nil).CheckOption), predicate, optionName, data)
}

// CheckOptionExistence mocks base method.
func (m *MockIExecutionManager) CheckOptionExistence(optionName string, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOptionExistence", optionName, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOptionExistence indicates an expected call of CheckOptionExistence.
func (mr *MockIExecutionManagerMockRecorder) CheckOptionExistence(optionName, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOptionExistence", reflect.TypeOf((*MockIExecutionManager)(nil).CheckOptionExistence), optionName, data)
}

// CheckOsName mocks base method.
func (m *MockIExecutionManager) CheckOsName(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOsName", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOsName indicates an expected call of CheckOsName.
func (mr *MockIExecutionManagerMockRecorder) CheckOsName(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOsName", reflect.TypeOf((*MockIExecutionManager)(nil).CheckOsName), predicate, data)
}

// CheckOsVersion mocks base method.
func (m *MockIExecutionManager) CheckOsVersion(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckOsVersion", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckOsVersion indicates an expected call of CheckOsVersion.
func (mr *MockIExecutionManagerMockRecorder) CheckOsVersion(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckOsVersion", reflect.TypeOf((*MockIExecutionManager)(nil).CheckOsVersion), predicate, data)
}

// CheckRequestCookieValueExistence mocks base method.
func (m *MockIExecutionManager) CheckRequestCookieValueExistence(path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRequestCookieValueExistence", path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRequestCookieValueExistence indicates an expected call of CheckRequestCookieValueExistence.
func (mr *MockIExecutionManagerMockRecorder) CheckRequestCookieValueExistence(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRequestCookieValueExistence", reflect.TypeOf((*MockIExecutionManager)(nil).CheckRequestCookieValueExistence), path, data)
}

// CheckRequestGetValueExistence mocks base method.
func (m *MockIExecutionManager) CheckRequestGetValueExistence(path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRequestGetValueExistence", path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRequestGetValueExistence indicates an expected call of CheckRequestGetValueExistence.
func (mr *MockIExecutionManagerMockRecorder) CheckRequestGetValueExistence(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRequestGetValueExistence", reflect.TypeOf((*MockIExecutionManager)(nil).CheckRequestGetValueExistence), path, data)
}

// CheckRequestHeaderValueExistence mocks base method.
func (m *MockIExecutionManager) CheckRequestHeaderValueExistence(path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRequestHeaderValueExistence", path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRequestHeaderValueExistence indicates an expected call of CheckRequestHeaderValueExistence.
func (mr *MockIExecutionManagerMockRecorder) CheckRequestHeaderValueExistence(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRequestHeaderValueExistence", reflect.TypeOf((*MockIExecutionManager)(nil).CheckRequestHeaderValueExistence), path, data)
}

// CheckRequestId mocks base method.
func (m *MockIExecutionManager) CheckRequestId(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRequestId", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRequestId indicates an expected call of CheckRequestId.
func (mr *MockIExecutionManagerMockRecorder) CheckRequestId(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRequestId", reflect.TypeOf((*MockIExecutionManager)(nil).CheckRequestId), predicate, data)
}

// CheckRequestLength mocks base method.
func (m *MockIExecutionManager) CheckRequestLength(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRequestLength", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRequestLength indicates an expected call of CheckRequestLength.
func (mr *MockIExecutionManagerMockRecorder) CheckRequestLength(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRequestLength", reflect.TypeOf((*MockIExecutionManager)(nil).CheckRequestLength), predicate, data)
}

// CheckRequestMethod mocks base method.
func (m *MockIExecutionManager) CheckRequestMethod(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRequestMethod", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRequestMethod indicates an expected call of CheckRequestMethod.
func (mr *MockIExecutionManagerMockRecorder) CheckRequestMethod(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRequestMethod", reflect.TypeOf((*MockIExecutionManager)(nil).CheckRequestMethod), predicate, data)
}

// CheckRequestPath mocks base method.
func (m *MockIExecutionManager) CheckRequestPath(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRequestPath", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRequestPath indicates an expected call of CheckRequestPath.
func (mr *MockIExecutionManagerMockRecorder) CheckRequestPath(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRequestPath", reflect.TypeOf((*MockIExecutionManager)(nil).CheckRequestPath), predicate, data)
}

// CheckRequestPaths mocks base method.
func (m *MockIExecutionManager) CheckRequestPaths(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRequestPaths", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRequestPaths indicates an expected call of CheckRequestPaths.
func (mr *MockIExecutionManagerMockRecorder) CheckRequestPaths(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRequestPaths", reflect.TypeOf((*MockIExecutionManager)(nil).CheckRequestPaths), predicate, data)
}

// CheckRequestPathsElement mocks base method.
func (m *MockIExecutionManager) CheckRequestPathsElement(predicate Predicate, index int, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRequestPathsElement", predicate, index, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRequestPathsElement indicates an expected call of CheckRequestPathsElement.
func (mr *MockIExecutionManagerMockRecorder) CheckRequestPathsElement(predicate, index, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRequestPathsElement", reflect.TypeOf((*MockIExecutionManager)(nil).CheckRequestPathsElement), predicate, index, path, data)
}

// CheckRequestPostValueExistence mocks base method.
func (m *MockIExecutionManager) CheckRequestPostValueExistence(path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRequestPostValueExistence", path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRequestPostValueExistence indicates an expected call of CheckRequestPostValueExistence.
func (mr *MockIExecutionManagerMockRecorder) CheckRequestPostValueExistence(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRequestPostValueExistence", reflect.TypeOf((*MockIExecutionManager)(nil).CheckRequestPostValueExistence), path, data)
}

// CheckRequestQuery mocks base method.
func (m *MockIExecutionManager) CheckRequestQuery(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRequestQuery", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRequestQuery indicates an expected call of CheckRequestQuery.
func (mr *MockIExecutionManagerMockRecorder) CheckRequestQuery(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRequestQuery", reflect.TypeOf((*MockIExecutionManager)(nil).CheckRequestQuery), predicate, data)
}

// CheckRequestTime mocks base method.
func (m *MockIExecutionManager) CheckRequestTime(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRequestTime", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRequestTime indicates an expected call of CheckRequestTime.
func (mr *MockIExecutionManagerMockRecorder) CheckRequestTime(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRequestTime", reflect.TypeOf((*MockIExecutionManager)(nil).CheckRequestTime), predicate, data)
}

// CheckResponseCode mocks base method.
func (m *MockIExecutionManager) CheckResponseCode(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckResponseCode", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckResponseCode indicates an expected call of CheckResponseCode.
func (mr *MockIExecutionManagerMockRecorder) CheckResponseCode(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckResponseCode", reflect.TypeOf((*MockIExecutionManager)(nil).CheckResponseCode), predicate, data)
}

// CheckResponseHeaderValueExistence mocks base method.
func (m *MockIExecutionManager) CheckResponseHeaderValueExistence(path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckResponseHeaderValueExistence", path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckResponseHeaderValueExistence indicates an expected call of CheckResponseHeaderValueExistence.
func (mr *MockIExecutionManagerMockRecorder) CheckResponseHeaderValueExistence(path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckResponseHeaderValueExistence", reflect.TypeOf((*MockIExecutionManager)(nil).CheckResponseHeaderValueExistence), path, data)
}

// CheckResponseLength mocks base method.
func (m *MockIExecutionManager) CheckResponseLength(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckResponseLength", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckResponseLength indicates an expected call of CheckResponseLength.
func (mr *MockIExecutionManagerMockRecorder) CheckResponseLength(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckResponseLength", reflect.TypeOf((*MockIExecutionManager)(nil).CheckResponseLength), predicate, data)
}

// CheckResponseSource mocks base method.
func (m *MockIExecutionManager) CheckResponseSource(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckResponseSource", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckResponseSource indicates an expected call of CheckResponseSource.
func (mr *MockIExecutionManagerMockRecorder) CheckResponseSource(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckResponseSource", reflect.TypeOf((*MockIExecutionManager)(nil).CheckResponseSource), predicate, data)
}

// MatchBasicAuthPassword mocks base method.
func (m *MockIExecutionManager) MatchBasicAuthPassword(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchBasicAuthPassword", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchBasicAuthPassword indicates an expected call of MatchBasicAuthPassword.
func (mr *MockIExecutionManagerMockRecorder) MatchBasicAuthPassword(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchBasicAuthPassword", reflect.TypeOf((*MockIExecutionManager)(nil).MatchBasicAuthPassword), patternId, data)
}

// MatchBasicAuthUsername mocks base method.
func (m *MockIExecutionManager) MatchBasicAuthUsername(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchBasicAuthUsername", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchBasicAuthUsername indicates an expected call of MatchBasicAuthUsername.
func (mr *MockIExecutionManagerMockRecorder) MatchBasicAuthUsername(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchBasicAuthUsername", reflect.TypeOf((*MockIExecutionManager)(nil).MatchBasicAuthUsername), patternId, data)
}

// MatchBrowserName mocks base method.
func (m *MockIExecutionManager) MatchBrowserName(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchBrowserName", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchBrowserName indicates an expected call of MatchBrowserName.
func (mr *MockIExecutionManagerMockRecorder) MatchBrowserName(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchBrowserName", reflect.TypeOf((*MockIExecutionManager)(nil).MatchBrowserName), patternId, data)
}

// MatchBrowserVersion mocks base method.
func (m *MockIExecutionManager) MatchBrowserVersion(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchBrowserVersion", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchBrowserVersion indicates an expected call of MatchBrowserVersion.
func (mr *MockIExecutionManagerMockRecorder) MatchBrowserVersion(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchBrowserVersion", reflect.TypeOf((*MockIExecutionManager)(nil).MatchBrowserVersion), patternId, data)
}

// MatchClientId mocks base method.
func (m *MockIExecutionManager) MatchClientId(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchClientId", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchClientId indicates an expected call of MatchClientId.
func (mr *MockIExecutionManagerMockRecorder) MatchClientId(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchClientId", reflect.TypeOf((*MockIExecutionManager)(nil).MatchClientId), patternId, data)
}

// MatchClientIp mocks base method.
func (m *MockIExecutionManager) MatchClientIp(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchClientIp", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchClientIp indicates an expected call of MatchClientIp.
func (mr *MockIExecutionManagerMockRecorder) MatchClientIp(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchClientIp", reflect.TypeOf((*MockIExecutionManager)(nil).MatchClientIp), patternId, data)
}

// MatchGeoIpAccuracyRadius mocks base method.
func (m *MockIExecutionManager) MatchGeoIpAccuracyRadius(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchGeoIpAccuracyRadius", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchGeoIpAccuracyRadius indicates an expected call of MatchGeoIpAccuracyRadius.
func (mr *MockIExecutionManagerMockRecorder) MatchGeoIpAccuracyRadius(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchGeoIpAccuracyRadius", reflect.TypeOf((*MockIExecutionManager)(nil).MatchGeoIpAccuracyRadius), patternId, data)
}

// MatchGeoIpCity mocks base method.
func (m *MockIExecutionManager) MatchGeoIpCity(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchGeoIpCity", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchGeoIpCity indicates an expected call of MatchGeoIpCity.
func (mr *MockIExecutionManagerMockRecorder) MatchGeoIpCity(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchGeoIpCity", reflect.TypeOf((*MockIExecutionManager)(nil).MatchGeoIpCity), patternId, data)
}

// MatchGeoIpCountry mocks base method.
func (m *MockIExecutionManager) MatchGeoIpCountry(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchGeoIpCountry", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchGeoIpCountry indicates an expected call of MatchGeoIpCountry.
func (mr *MockIExecutionManagerMockRecorder) MatchGeoIpCountry(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchGeoIpCountry", reflect.TypeOf((*MockIExecutionManager)(nil).MatchGeoIpCountry), patternId, data)
}

// MatchGeoIpCountryCode mocks base method.
func (m *MockIExecutionManager) MatchGeoIpCountryCode(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchGeoIpCountryCode", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchGeoIpCountryCode indicates an expected call of MatchGeoIpCountryCode.
func (mr *MockIExecutionManagerMockRecorder) MatchGeoIpCountryCode(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchGeoIpCountryCode", reflect.TypeOf((*MockIExecutionManager)(nil).MatchGeoIpCountryCode), patternId, data)
}

// MatchGeoIpLat mocks base method.
func (m *MockIExecutionManager) MatchGeoIpLat(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchGeoIpLat", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchGeoIpLat indicates an expected call of MatchGeoIpLat.
func (mr *MockIExecutionManagerMockRecorder) MatchGeoIpLat(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchGeoIpLat", reflect.TypeOf((*MockIExecutionManager)(nil).MatchGeoIpLat), patternId, data)
}

// MatchGeoIpLon mocks base method.
func (m *MockIExecutionManager) MatchGeoIpLon(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchGeoIpLon", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchGeoIpLon indicates an expected call of MatchGeoIpLon.
func (mr *MockIExecutionManagerMockRecorder) MatchGeoIpLon(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchGeoIpLon", reflect.TypeOf((*MockIExecutionManager)(nil).MatchGeoIpLon), patternId, data)
}

// MatchHttpDataHost mocks base method.
func (m *MockIExecutionManager) MatchHttpDataHost(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchHttpDataHost", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchHttpDataHost indicates an expected call of MatchHttpDataHost.
func (mr *MockIExecutionManagerMockRecorder) MatchHttpDataHost(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchHttpDataHost", reflect.TypeOf((*MockIExecutionManager)(nil).MatchHttpDataHost), patternId, data)
}

// MatchHttpDataHttpVersion mocks base method.
func (m *MockIExecutionManager) MatchHttpDataHttpVersion(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchHttpDataHttpVersion", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchHttpDataHttpVersion indicates an expected call of MatchHttpDataHttpVersion.
func (mr *MockIExecutionManagerMockRecorder) MatchHttpDataHttpVersion(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchHttpDataHttpVersion", reflect.TypeOf((*MockIExecutionManager)(nil).MatchHttpDataHttpVersion), patternId, data)
}

// MatchHttpDataPort mocks base method.
func (m *MockIExecutionManager) MatchHttpDataPort(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchHttpDataPort", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchHttpDataPort indicates an expected call of MatchHttpDataPort.
func (mr *MockIExecutionManagerMockRecorder) MatchHttpDataPort(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchHttpDataPort", reflect.TypeOf((*MockIExecutionManager)(nil).MatchHttpDataPort), patternId, data)
}

// MatchHttpDataProtocol mocks base method.
func (m *MockIExecutionManager) MatchHttpDataProtocol(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchHttpDataProtocol", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchHttpDataProtocol indicates an expected call of MatchHttpDataProtocol.
func (mr *MockIExecutionManagerMockRecorder) MatchHttpDataProtocol(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchHttpDataProtocol", reflect.TypeOf((*MockIExecutionManager)(nil).MatchHttpDataProtocol), patternId, data)
}

// MatchHttpDataTimestamp mocks base method.
func (m *MockIExecutionManager) MatchHttpDataTimestamp(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchHttpDataTimestamp", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchHttpDataTimestamp indicates an expected call of MatchHttpDataTimestamp.
func (mr *MockIExecutionManagerMockRecorder) MatchHttpDataTimestamp(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchHttpDataTimestamp", reflect.TypeOf((*MockIExecutionManager)(nil).MatchHttpDataTimestamp), patternId, data)
}

// MatchOption mocks base method.
func (m *MockIExecutionManager) MatchOption(patternId uint, name string, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchOption", patternId, name, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchOption indicates an expected call of MatchOption.
func (mr *MockIExecutionManagerMockRecorder) MatchOption(patternId, name, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchOption", reflect.TypeOf((*MockIExecutionManager)(nil).MatchOption), patternId, name, data)
}

// MatchOsName mocks base method.
func (m *MockIExecutionManager) MatchOsName(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchOsName", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchOsName indicates an expected call of MatchOsName.
func (mr *MockIExecutionManagerMockRecorder) MatchOsName(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchOsName", reflect.TypeOf((*MockIExecutionManager)(nil).MatchOsName), patternId, data)
}

// MatchOsVersion mocks base method.
func (m *MockIExecutionManager) MatchOsVersion(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchOsVersion", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchOsVersion indicates an expected call of MatchOsVersion.
func (mr *MockIExecutionManagerMockRecorder) MatchOsVersion(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchOsVersion", reflect.TypeOf((*MockIExecutionManager)(nil).MatchOsVersion), patternId, data)
}

// MatchRequestId mocks base method.
func (m *MockIExecutionManager) MatchRequestId(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchRequestId", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchRequestId indicates an expected call of MatchRequestId.
func (mr *MockIExecutionManagerMockRecorder) MatchRequestId(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchRequestId", reflect.TypeOf((*MockIExecutionManager)(nil).MatchRequestId), patternId, data)
}

// MatchRequestLength mocks base method.
func (m *MockIExecutionManager) MatchRequestLength(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchRequestLength", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchRequestLength indicates an expected call of MatchRequestLength.
func (mr *MockIExecutionManagerMockRecorder) MatchRequestLength(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchRequestLength", reflect.TypeOf((*MockIExecutionManager)(nil).MatchRequestLength), patternId, data)
}

// MatchRequestMethod mocks base method.
func (m *MockIExecutionManager) MatchRequestMethod(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchRequestMethod", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchRequestMethod indicates an expected call of MatchRequestMethod.
func (mr *MockIExecutionManagerMockRecorder) MatchRequestMethod(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchRequestMethod", reflect.TypeOf((*MockIExecutionManager)(nil).MatchRequestMethod), patternId, data)
}

// MatchRequestPath mocks base method.
func (m *MockIExecutionManager) MatchRequestPath(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchRequestPath", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchRequestPath indicates an expected call of MatchRequestPath.
func (mr *MockIExecutionManagerMockRecorder) MatchRequestPath(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchRequestPath", reflect.TypeOf((*MockIExecutionManager)(nil).MatchRequestPath), patternId, data)
}

// MatchRequestPaths mocks base method.
func (m *MockIExecutionManager) MatchRequestPaths(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchRequestPaths", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchRequestPaths indicates an expected call of MatchRequestPaths.
func (mr *MockIExecutionManagerMockRecorder) MatchRequestPaths(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchRequestPaths", reflect.TypeOf((*MockIExecutionManager)(nil).MatchRequestPaths), patternId, data)
}

// MatchRequestPathsElement mocks base method.
func (m *MockIExecutionManager) MatchRequestPathsElement(patternId uint, index int, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchRequestPathsElement", patternId, index, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchRequestPathsElement indicates an expected call of MatchRequestPathsElement.
func (mr *MockIExecutionManagerMockRecorder) MatchRequestPathsElement(patternId, index, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchRequestPathsElement", reflect.TypeOf((*MockIExecutionManager)(nil).MatchRequestPathsElement), patternId, index, path, data)
}

// MatchRequestQuery mocks base method.
func (m *MockIExecutionManager) MatchRequestQuery(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchRequestQuery", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchRequestQuery indicates an expected call of MatchRequestQuery.
func (mr *MockIExecutionManagerMockRecorder) MatchRequestQuery(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchRequestQuery", reflect.TypeOf((*MockIExecutionManager)(nil).MatchRequestQuery), patternId, data)
}

// MatchRequestTime mocks base method.
func (m *MockIExecutionManager) MatchRequestTime(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchRequestTime", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchRequestTime indicates an expected call of MatchRequestTime.
func (mr *MockIExecutionManagerMockRecorder) MatchRequestTime(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchRequestTime", reflect.TypeOf((*MockIExecutionManager)(nil).MatchRequestTime), patternId, data)
}

// MatchResponseCode mocks base method.
func (m *MockIExecutionManager) MatchResponseCode(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchResponseCode", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchResponseCode indicates an expected call of MatchResponseCode.
func (mr *MockIExecutionManagerMockRecorder) MatchResponseCode(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchResponseCode", reflect.TypeOf((*MockIExecutionManager)(nil).MatchResponseCode), patternId, data)
}

// MatchResponseLength mocks base method.
func (m *MockIExecutionManager) MatchResponseLength(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchResponseLength", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchResponseLength indicates an expected call of MatchResponseLength.
func (mr *MockIExecutionManagerMockRecorder) MatchResponseLength(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchResponseLength", reflect.TypeOf((*MockIExecutionManager)(nil).MatchResponseLength), patternId, data)
}

// MatchResponseSource mocks base method.
func (m *MockIExecutionManager) MatchResponseSource(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchResponseSource", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MatchResponseSource indicates an expected call of MatchResponseSource.
func (mr *MockIExecutionManagerMockRecorder) MatchResponseSource(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchResponseSource", reflect.TypeOf((*MockIExecutionManager)(nil).MatchResponseSource), patternId, data)
}

// RecursiveCheckBasicAuth mocks base method.
func (m *MockIExecutionManager) RecursiveCheckBasicAuth(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckBasicAuth", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckBasicAuth indicates an expected call of RecursiveCheckBasicAuth.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckBasicAuth(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckBasicAuth", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckBasicAuth), predicate, data)
}

// RecursiveCheckBrowser mocks base method.
func (m *MockIExecutionManager) RecursiveCheckBrowser(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckBrowser", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckBrowser indicates an expected call of RecursiveCheckBrowser.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckBrowser(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckBrowser", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckBrowser), predicate, data)
}

// RecursiveCheckClient mocks base method.
func (m *MockIExecutionManager) RecursiveCheckClient(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckClient", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckClient indicates an expected call of RecursiveCheckClient.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckClient(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckClient", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckClient), predicate, data)
}

// RecursiveCheckGeoIp mocks base method.
func (m *MockIExecutionManager) RecursiveCheckGeoIp(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckGeoIp", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckGeoIp indicates an expected call of RecursiveCheckGeoIp.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckGeoIp(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckGeoIp", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckGeoIp), predicate, data)
}

// RecursiveCheckHttpData mocks base method.
func (m *MockIExecutionManager) RecursiveCheckHttpData(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckHttpData", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckHttpData indicates an expected call of RecursiveCheckHttpData.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckHttpData(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckHttpData", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckHttpData), predicate, data)
}

// RecursiveCheckOptions mocks base method.
func (m *MockIExecutionManager) RecursiveCheckOptions(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckOptions", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckOptions indicates an expected call of RecursiveCheckOptions.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckOptions(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckOptions", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckOptions), predicate, data)
}

// RecursiveCheckOs mocks base method.
func (m *MockIExecutionManager) RecursiveCheckOs(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckOs", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckOs indicates an expected call of RecursiveCheckOs.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckOs(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckOs", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckOs), predicate, data)
}

// RecursiveCheckRequest mocks base method.
func (m *MockIExecutionManager) RecursiveCheckRequest(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckRequest", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckRequest indicates an expected call of RecursiveCheckRequest.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckRequest(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckRequest", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckRequest), predicate, data)
}

// RecursiveCheckRequestBody mocks base method.
func (m *MockIExecutionManager) RecursiveCheckRequestBody(predicate Predicate, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckRequestBody", predicate, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckRequestBody indicates an expected call of RecursiveCheckRequestBody.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckRequestBody(predicate, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckRequestBody", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckRequestBody), predicate, path, data)
}

// RecursiveCheckRequestCookieValue mocks base method.
func (m *MockIExecutionManager) RecursiveCheckRequestCookieValue(predicate Predicate, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckRequestCookieValue", predicate, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckRequestCookieValue indicates an expected call of RecursiveCheckRequestCookieValue.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckRequestCookieValue(predicate, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckRequestCookieValue", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckRequestCookieValue), predicate, path, data)
}

// RecursiveCheckRequestCookies mocks base method.
func (m *MockIExecutionManager) RecursiveCheckRequestCookies(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckRequestCookies", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckRequestCookies indicates an expected call of RecursiveCheckRequestCookies.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckRequestCookies(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckRequestCookies", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckRequestCookies), predicate, data)
}

// RecursiveCheckRequestGet mocks base method.
func (m *MockIExecutionManager) RecursiveCheckRequestGet(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckRequestGet", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckRequestGet indicates an expected call of RecursiveCheckRequestGet.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckRequestGet(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckRequestGet", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckRequestGet), predicate, data)
}

// RecursiveCheckRequestGetValue mocks base method.
func (m *MockIExecutionManager) RecursiveCheckRequestGetValue(predicate Predicate, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckRequestGetValue", predicate, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckRequestGetValue indicates an expected call of RecursiveCheckRequestGetValue.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckRequestGetValue(predicate, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckRequestGetValue", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckRequestGetValue), predicate, path, data)
}

// RecursiveCheckRequestHeaderValue mocks base method.
func (m *MockIExecutionManager) RecursiveCheckRequestHeaderValue(predicate Predicate, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckRequestHeaderValue", predicate, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckRequestHeaderValue indicates an expected call of RecursiveCheckRequestHeaderValue.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckRequestHeaderValue(predicate, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckRequestHeaderValue", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckRequestHeaderValue), predicate, path, data)
}

// RecursiveCheckRequestHeaders mocks base method.
func (m *MockIExecutionManager) RecursiveCheckRequestHeaders(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckRequestHeaders", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckRequestHeaders indicates an expected call of RecursiveCheckRequestHeaders.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckRequestHeaders(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckRequestHeaders", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckRequestHeaders), predicate, data)
}

// RecursiveCheckRequestPost mocks base method.
func (m *MockIExecutionManager) RecursiveCheckRequestPost(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckRequestPost", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckRequestPost indicates an expected call of RecursiveCheckRequestPost.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckRequestPost(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckRequestPost", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckRequestPost), predicate, data)
}

// RecursiveCheckRequestPostValue mocks base method.
func (m *MockIExecutionManager) RecursiveCheckRequestPostValue(predicate Predicate, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckRequestPostValue", predicate, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckRequestPostValue indicates an expected call of RecursiveCheckRequestPostValue.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckRequestPostValue(predicate, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckRequestPostValue", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckRequestPostValue), predicate, path, data)
}

// RecursiveCheckResponse mocks base method.
func (m *MockIExecutionManager) RecursiveCheckResponse(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckResponse", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckResponse indicates an expected call of RecursiveCheckResponse.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckResponse(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckResponse", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckResponse), predicate, data)
}

// RecursiveCheckResponseBody mocks base method.
func (m *MockIExecutionManager) RecursiveCheckResponseBody(predicate Predicate, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckResponseBody", predicate, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckResponseBody indicates an expected call of RecursiveCheckResponseBody.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckResponseBody(predicate, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckResponseBody", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckResponseBody), predicate, path, data)
}

// RecursiveCheckResponseHeaderValue mocks base method.
func (m *MockIExecutionManager) RecursiveCheckResponseHeaderValue(predicate Predicate, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckResponseHeaderValue", predicate, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckResponseHeaderValue indicates an expected call of RecursiveCheckResponseHeaderValue.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckResponseHeaderValue(predicate, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckResponseHeaderValue", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckResponseHeaderValue), predicate, path, data)
}

// RecursiveCheckResponseHeaders mocks base method.
func (m *MockIExecutionManager) RecursiveCheckResponseHeaders(predicate Predicate, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveCheckResponseHeaders", predicate, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveCheckResponseHeaders indicates an expected call of RecursiveCheckResponseHeaders.
func (mr *MockIExecutionManagerMockRecorder) RecursiveCheckResponseHeaders(predicate, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveCheckResponseHeaders", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveCheckResponseHeaders), predicate, data)
}

// RecursiveMatchBasicAuth mocks base method.
func (m *MockIExecutionManager) RecursiveMatchBasicAuth(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchBasicAuth", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchBasicAuth indicates an expected call of RecursiveMatchBasicAuth.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchBasicAuth(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchBasicAuth", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchBasicAuth), patternId, data)
}

// RecursiveMatchBrowser mocks base method.
func (m *MockIExecutionManager) RecursiveMatchBrowser(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchBrowser", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchBrowser indicates an expected call of RecursiveMatchBrowser.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchBrowser(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchBrowser", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchBrowser), patternId, data)
}

// RecursiveMatchClient mocks base method.
func (m *MockIExecutionManager) RecursiveMatchClient(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchClient", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchClient indicates an expected call of RecursiveMatchClient.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchClient(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchClient", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchClient), patternId, data)
}

// RecursiveMatchGeoIp mocks base method.
func (m *MockIExecutionManager) RecursiveMatchGeoIp(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchGeoIp", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchGeoIp indicates an expected call of RecursiveMatchGeoIp.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchGeoIp(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchGeoIp", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchGeoIp), patternId, data)
}

// RecursiveMatchHttpData mocks base method.
func (m *MockIExecutionManager) RecursiveMatchHttpData(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchHttpData", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchHttpData indicates an expected call of RecursiveMatchHttpData.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchHttpData(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchHttpData", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchHttpData), patternId, data)
}

// RecursiveMatchOptions mocks base method.
func (m *MockIExecutionManager) RecursiveMatchOptions(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchOptions", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchOptions indicates an expected call of RecursiveMatchOptions.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchOptions(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchOptions", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchOptions), patternId, data)
}

// RecursiveMatchOs mocks base method.
func (m *MockIExecutionManager) RecursiveMatchOs(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchOs", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchOs indicates an expected call of RecursiveMatchOs.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchOs(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchOs", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchOs), patternId, data)
}

// RecursiveMatchRequest mocks base method.
func (m *MockIExecutionManager) RecursiveMatchRequest(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchRequest", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchRequest indicates an expected call of RecursiveMatchRequest.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchRequest(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchRequest", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchRequest), patternId, data)
}

// RecursiveMatchRequestBody mocks base method.
func (m *MockIExecutionManager) RecursiveMatchRequestBody(patternId uint, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchRequestBody", patternId, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchRequestBody indicates an expected call of RecursiveMatchRequestBody.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchRequestBody(patternId, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchRequestBody", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchRequestBody), patternId, path, data)
}

// RecursiveMatchRequestCookieValue mocks base method.
func (m *MockIExecutionManager) RecursiveMatchRequestCookieValue(patternId uint, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchRequestCookieValue", patternId, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchRequestCookieValue indicates an expected call of RecursiveMatchRequestCookieValue.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchRequestCookieValue(patternId, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchRequestCookieValue", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchRequestCookieValue), patternId, path, data)
}

// RecursiveMatchRequestCookies mocks base method.
func (m *MockIExecutionManager) RecursiveMatchRequestCookies(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchRequestCookies", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchRequestCookies indicates an expected call of RecursiveMatchRequestCookies.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchRequestCookies(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchRequestCookies", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchRequestCookies), patternId, data)
}

// RecursiveMatchRequestGet mocks base method.
func (m *MockIExecutionManager) RecursiveMatchRequestGet(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchRequestGet", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchRequestGet indicates an expected call of RecursiveMatchRequestGet.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchRequestGet(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchRequestGet", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchRequestGet), patternId, data)
}

// RecursiveMatchRequestGetValue mocks base method.
func (m *MockIExecutionManager) RecursiveMatchRequestGetValue(patternId uint, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchRequestGetValue", patternId, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchRequestGetValue indicates an expected call of RecursiveMatchRequestGetValue.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchRequestGetValue(patternId, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchRequestGetValue", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchRequestGetValue), patternId, path, data)
}

// RecursiveMatchRequestHeaderValue mocks base method.
func (m *MockIExecutionManager) RecursiveMatchRequestHeaderValue(patternId uint, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchRequestHeaderValue", patternId, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchRequestHeaderValue indicates an expected call of RecursiveMatchRequestHeaderValue.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchRequestHeaderValue(patternId, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchRequestHeaderValue", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchRequestHeaderValue), patternId, path, data)
}

// RecursiveMatchRequestHeaders mocks base method.
func (m *MockIExecutionManager) RecursiveMatchRequestHeaders(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchRequestHeaders", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchRequestHeaders indicates an expected call of RecursiveMatchRequestHeaders.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchRequestHeaders(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchRequestHeaders", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchRequestHeaders), patternId, data)
}

// RecursiveMatchRequestPost mocks base method.
func (m *MockIExecutionManager) RecursiveMatchRequestPost(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchRequestPost", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchRequestPost indicates an expected call of RecursiveMatchRequestPost.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchRequestPost(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchRequestPost", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchRequestPost), patternId, data)
}

// RecursiveMatchRequestPostValue mocks base method.
func (m *MockIExecutionManager) RecursiveMatchRequestPostValue(patternId uint, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchRequestPostValue", patternId, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchRequestPostValue indicates an expected call of RecursiveMatchRequestPostValue.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchRequestPostValue(patternId, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchRequestPostValue", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchRequestPostValue), patternId, path, data)
}

// RecursiveMatchResponse mocks base method.
func (m *MockIExecutionManager) RecursiveMatchResponse(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchResponse", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchResponse indicates an expected call of RecursiveMatchResponse.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchResponse(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchResponse", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchResponse), patternId, data)
}

// RecursiveMatchResponseBody mocks base method.
func (m *MockIExecutionManager) RecursiveMatchResponseBody(patternId uint, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchResponseBody", patternId, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchResponseBody indicates an expected call of RecursiveMatchResponseBody.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchResponseBody(patternId, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchResponseBody", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchResponseBody), patternId, path, data)
}

// RecursiveMatchResponseHeaderValue mocks base method.
func (m *MockIExecutionManager) RecursiveMatchResponseHeaderValue(patternId uint, path ContentPath, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchResponseHeaderValue", patternId, path, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchResponseHeaderValue indicates an expected call of RecursiveMatchResponseHeaderValue.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchResponseHeaderValue(patternId, path, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchResponseHeaderValue", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchResponseHeaderValue), patternId, path, data)
}

// RecursiveMatchResponseHeaders mocks base method.
func (m *MockIExecutionManager) RecursiveMatchResponseHeaders(patternId uint, data *HttpData) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecursiveMatchResponseHeaders", patternId, data)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecursiveMatchResponseHeaders indicates an expected call of RecursiveMatchResponseHeaders.
func (mr *MockIExecutionManagerMockRecorder) RecursiveMatchResponseHeaders(patternId, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecursiveMatchResponseHeaders", reflect.TypeOf((*MockIExecutionManager)(nil).RecursiveMatchResponseHeaders), patternId, data)
}
